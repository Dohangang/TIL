/*
문제 설명:
네트워크란 컴퓨터 상호 간에 정보를 교환할 수 있도록 연결된 형태를 의미합니다. 예를 들어, 컴퓨터 A와 컴퓨터 B가 직접적으로 연결되어있고, 
컴퓨터 B와 컴퓨터 C가 직접적으로 연결되어 있을 때 컴퓨터 A와 컴퓨터 C도 간접적으로 연결되어 정보를 교환할 수 있습니다. 
따라서 컴퓨터 A, B, C는 모두 같은 네트워크 상에 있다고 할 수 있습니다.

컴퓨터의 개수 n, 연결에 대한 정보가 담긴 2차원 배열 computers가 매개변수로 주어질 때, 네트워크의 개수를 return 하도록 solution 함수를 작성하시오.

제한사항:
📌 컴퓨터의 개수 n은 1 이상 200 이하인 자연수입니다.
📌 각 컴퓨터는 0부터 n-1인 정수로 표현합니다.
📌 i번 컴퓨터와 j번 컴퓨터가 연결되어 있으면 computers[i][j]를 1로 표현합니다.
📌 computer[i][i]는 항상 1입니다.
*/

function solution(n, computers) {
  const visited = Array(n).fill(false);
  let count = 0;

  function dfs(node) {
    visited[node] = true;
    for (let i = 0; i < n; i++) {
      if (computers[node][i] === 1 && !visited[i]) {
        dfs(i);
      }
    }
  }

  for (let i = 0; i < n; i++) {
    if (!visited[i]) {
      dfs(i);
      count++;
    }
  }

  return count;
}

// dfs 함수는 한 곳에 들어가 그 한 곳과 연결된 모든 곳을 체크한다.
// 아래의 바깥 for문은 체크가 안된 곳을 발견하면, 그 곳에서 dfs를 실행하는 역할이다. 그러면서 count도 올려주고

// 깊이 우선 탐색(DFS, Depth First Search)
// a. 탐색 시작 노드를 스택에 삽입하고 방문 처리
// b. 스택의 최상단 노드에 방문하지 않은 인접 노드가 있으면 그 인접 노드를 스택에 넣고 방문 처리, 그리고 방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼냄
// c. 두 번째 과정을 더 이상 수행할 수 없을 때까지 반복
// 1
// 2  5    9
// 3  6,8  10
// 4  7
// 노드 트리로 생각하면 위의 순서로 탐색하는 알고리즘

// 너비 우선 탐색(BFS, Breadth First Search)
// a. 탐색 시작 노드를 큐에 삽입하고 방문 처리
// b. 큐에서 노드를 꺼내 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입하고 방문 처리
// c. 두 번째 과정을 더 이상 수행할 수 없을 때까지 반복
// 1
// 2  3     4
// 5  6,7   8
// 9  10
// 노드 트리로 생각하면 위의 순서로 탐색하는 알고리즘
