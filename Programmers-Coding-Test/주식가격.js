/*
문제 설명:
초 단위로 기록된 주식 가격이 담긴 배열 prices가 매개변수로 주어집니다.
각 시점의 가격이 떨어지지 않고 몇 초 동안 유지되었는지를 계산하여 배열에 담아 반환하는 solution 함수를 완성하세요.

제한사항:
📌 prices의 각 가격은 1 이상 10,000 이하인 자연수입니다.
📌 prices의 길이는 2 이상 100,000 이하입니다.

입출력 예:
  ┌─────────────────┬─────────────────┐
  │ prices          │ return          │
  ├─────────────────┼─────────────────┤
  │ [1, 2, 3, 2, 3] │ [4, 3, 1, 1, 0] │
  └─────────────────┴─────────────────┘

  입출력 예 설명:
   * 1초의 주식 가격은 1이며, 끝까지 가격이 떨어지지 않았습니다. 따라서 4초간 유지되었습니다.
   * 2초의 주식 가격은 2이며, 4초에 2로 가격이 떨어졌지만 그 전까지는 떨어지지 않았습니다. 따라서 3초간 유지되었습니다.
   * 3초의 주식 가격은 3이며, 4초에 2로 가격이 떨어졌습니다. 따라서 1초간 유지되었습니다.
   * 4초의 주식 가격은 2이며, 5초에 3으로 올랐습니다. 따라서 1초간 유지되었습니다.
   * 5초의 주식 가격은 3이며, 마지막 시점이므로 0초간 유지되었습니다.
*/

function solution(prices) {
  const n = prices.length;
  const answer = Array.from({ length: n }, (_, i) => n - 1 - i);
  const stack = [];
  for (let i = 0; i < n; i++) {
    while (stack.length > 0 && prices[stack[stack.length - 1]] > prices[i]) {
      const topIndex = stack.pop();
      answer[topIndex] = i - topIndex;
    }
    stack.push(i);
  }

  return answer;
}
