/*
문제 설명:
초 단위로 기록된 주식 가격이 담긴 배열 prices가 매개변수로 주어집니다.
각 시점의 가격이 떨어지지 않고 몇 초 동안 유지되었는지를 계산하여 배열에 담아 반환하는 solution 함수를 완성하세요.

제한사항:
📌 prices의 각 가격은 1 이상 10,000 이하인 자연수입니다.
📌 prices의 길이는 2 이상 100,000 이하입니다.

입출력 예:
  ┌─────────────────┬─────────────────┐
  │ prices          │ return          │
  ├─────────────────┼─────────────────┤
  │ [1, 2, 3, 2, 3] │ [4, 3, 1, 1, 0] │
  └─────────────────┴─────────────────┘

  입출력 예 설명:
   * 1초의 주식 가격은 1이며, 끝까지 가격이 떨어지지 않았습니다. 따라서 4초간 유지되었습니다.
   * 2초의 주식 가격은 2이며, 4초에 2로 가격이 떨어졌지만 그 전까지는 떨어지지 않았습니다. 따라서 3초간 유지되었습니다.
   * 3초의 주식 가격은 3이며, 4초에 2로 가격이 떨어졌습니다. 따라서 1초간 유지되었습니다.
   * 4초의 주식 가격은 2이며, 5초에 3으로 올랐습니다. 따라서 1초간 유지되었습니다.
   * 5초의 주식 가격은 3이며, 마지막 시점이므로 0초간 유지되었습니다.
*/

function solution(prices) {
  const n = prices.length;
  const answer = Array.from({ length: n }, (_, i) => n - 1 - i);
  const stack = [];
  for (let i = 0; i < n; i++) {
    while (stack.length > 0 && prices[stack[stack.length - 1]] > prices[i]) {
      const topIndex = stack.pop();
      answer[topIndex] = i - topIndex;
    }
    stack.push(i);
  }

  return answer;
}

// 모노토닉 알고리즘 (Monotonic Algorithm) : 스택이나 큐와 같은 자료구조를 사용하여 특정 순서 (단조 증가, 단조 감소)를 유지하면서
// 문제를 해결하는 알고리즘 기법. 주로 배열에서 특정 조건을 만족하는 다음 원소 찾기, 최댓값/최솟값 찾기 등에 활용

// 여기서 while문이 반복문 안에 있어 O(n²)처럼 보일 수 있지만, 각 인덱스는 스택에 정확히 한 번 `push`되고, 최대 한 번 `pop`된다.
// 즉, while문 안의 코드는 전체 for문 실행에 걸쳐 총 n번 이하로만 실행된다. 결과적으로 총 시간 복잡도는 O(n)이 됩니다.
